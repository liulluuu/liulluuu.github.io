<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构之基本认识</title>
    <url>/2021/11/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<h1 id="《数据结构（严蔚敏）》-基本认识了解"><a href="#《数据结构（严蔚敏）》-基本认识了解" class="headerlink" title="《数据结构（严蔚敏）》|基本认识了解"></a>《数据结构（严蔚敏）》|基本认识了解</h1>]]></content>
  </entry>
  <entry>
    <title>派森学习之旅</title>
    <url>/2021/11/01/%E6%B4%BE%E6%A3%AE%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<h1 id="派森学习之旅"><a href="#派森学习之旅" class="headerlink" title="派森学习之旅"></a>派森学习之旅</h1><p>[TOC]</p>
<p>IDLE是一个Python Shell，shell的意思就是“外壳”，也就是一个通过键入文本与程序交互的途径。</p>
<p><code>&gt;&gt;&gt;</code>这个提示符的含义是Python已经准备好了，等着输入端键入Python指令。</p>
<p>在IDLE中利用快捷键<code>alt+N</code>即可快捷显示上一条命令；<code>alt+P</code>快捷显示下一条命令。新建窗口（new window）快捷键<code>Ctrl+N</code></p>
<h2 id="一-实例讲解语法、函数"><a href="#一-实例讲解语法、函数" class="headerlink" title="一.实例讲解语法、函数"></a>一.实例讲解语法、函数</h2><h3 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1.字符串"></a>1.字符串</h3><p>字符串相加即为字符串相组合</p>
<p><img  src="https://gitee.com/liu-lull/typora/raw/master/typora/image-20211030180551342.png"  ><span class="image-caption">image-20211030180551342</span></p>
<p>字符串就是引号内的全部东西，也可以把字符串叫做文本，但是文本和数字截然不同</p>
<p>在Python中创建字符串需要在字符两边加上引号，可以是单引号或者双引号，但是<strong>引号必须成对</strong>。</p>
<p>字符串中需要出现单引号或者双引号的时候可以有两种方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>使用转义符号（\）对字符串中的引号进行转义<br><span class="hljs-number">2.</span>利用单双引号交替使用<br><br>**对于一个字符串中有很多反斜杠**<br>可以使用 原始字符串（）在正则表达式中还有妙用<br>原始字符串的使用：只需要在字符串前边加一个英文字母r即可<br>在原始字符串的最后不能再多加一个反斜杠（\）<br></code></pre></td></tr></table></figure>

<p><strong>如果要得到一个长字符串（不改变其换行格式）则需要三引号</strong></p>
<p><img  src="https://gitee.com/liu-lull/typora/raw/master/typora/image-20211103102432350.png"  ><span class="image-caption">image-20211103102432350</span></p>
<h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h3><p>变量也可以不需要定义，直接赋值</p>
<p>BIF == Built-in function（内置函数）</p>
<p>变量名是把一个值赋值给一个名字时，将值存储在内存中，称之为变量，在大多数语言中也叫做“给变量赋值”或“把值存储在变量中”。但是Python更像是把名字贴在值的上边。</p>
<p><strong>使用变量的时候需要注意的地方</strong>：</p>
<ul>
<li>使用变量前需要先对变量赋值</li>
<li>变量名不能以数字开头</li>
<li>等号（=）是赋值的意思，左边是名字，右边是值，千万不能写反</li>
</ul>
<p><strong>注意：</strong> Python中的关键字不能作为变量名，否则会被赋予一个新的意义，再使用会报错用新身份代替BIF</p>
<h3 id="3-条件分支"><a href="#3-条件分支" class="headerlink" title="3.条件分支"></a>3.条件分支</h3><h4 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h4><p><img  src="https://gitee.com/liu-lull/typora/raw/master/typora/image-20211103103018875.png"  ><span class="image-caption">image-20211103103018875</span></p>
<h4 id="Python的条件分支语法"><a href="#Python的条件分支语法" class="headerlink" title="Python的条件分支语法"></a>Python的条件分支语法</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件:<br>    条件为真（true）执行的操作<br><span class="hljs-keyword">else</span>:<br>    条件为假（false）执行的操作<br></code></pre></td></tr></table></figure>

<h3 id="4-while循环"><a href="#4-while循环" class="headerlink" title="4.while循环"></a>4.while循环</h3><h4 id="while循环语法"><a href="#while循环语法" class="headerlink" title="while循环语法"></a>while循环语法</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>    条件为真（true）执行的操作<br></code></pre></td></tr></table></figure>

<h4 id="Python中的and逻辑操作符"><a href="#Python中的and逻辑操作符" class="headerlink" title="Python中的and逻辑操作符"></a>Python中的and逻辑操作符</h4><p>and逻辑操作符可以将任意表达式连接在一起，并得到一个布尔类型的值</p>
<p>（相当于“且”的关系，两边的式子全为真时才是true）</p>
<h3 id="5-Python中的数据类型"><a href="#5-Python中的数据类型" class="headerlink" title="5.Python中的数据类型"></a>5.Python中的数据类型</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><p>包含有整型、浮点型、布尔类型</p>
<p>整型是整数类型，也与长整型结合起来了，他的长度不受限制，只限制于计算机内存的总数</p>
<p>浮点型是小数类型的数字</p>
<p>布尔类型可以看做整数类型来计算</p>
<p>e记法：科学计数法，用来表示数值特别大或特别小的数 e记法会使数字变为一个浮点型</p>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p><img  src="https://gitee.com/liu-lull/typora/raw/master/typora/image-20211103215028304.png"  ><span class="image-caption">image-20211103215028304</span></p>
<p>字符串中只有数字的时候才能够将字符串强制转换为整数</p>
<p>如果是浮点数转换为整数，Python会采取截断处理（这样效率高），直接将小数点后的数字截取掉</p>
<h4 id="获取类型的信息"><a href="#获取类型的信息" class="headerlink" title="获取类型的信息"></a>获取类型的信息</h4><p><code>type()</code>函数可以明确得知变量的类型</p>
<p>更好的是使用<code>isinstance()</code>这个BIF，有两个参数，第一个参数是带确定类型的参数，第二个参数是指定一个参数类型，然后instance会返回一个布尔类型的值，true表示两个参数类型一致，false表示两个参数类型不一致</p>
<h3 id="6-操作符"><a href="#6-操作符" class="headerlink" title="6.操作符"></a>6.操作符</h3><h4 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h4><p>特殊的：<code>%（求余数）</code>     <code>**（幂运算）</code>     <code>//（地板除法）</code></p>
<p>Python3中除法是真实的除法，有小数也会写出小数，是个精确的值</p>
<h4 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h4><p>对于-（负号）来说，有一个操作数时，是一元运算符</p>
<p>比较操作符 &gt; 逻辑操作符</p>
<p>幂运算符比其左侧的操作运算符优先级高，比其右侧的操作运算符优先级低</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">-<span class="hljs-number">3</span> ** <span class="hljs-number">2</span>  // -<span class="hljs-number">9</span> 即等于-(<span class="hljs-number">3</span> ** <span class="hljs-number">2</span>)<br><span class="hljs-number">3</span> ** -<span class="hljs-number">2</span>  // <span class="hljs-number">0.11111111111111</span> 即等于<span class="hljs-number">3</span> ** (-<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure>

<p>比较操作符根据值的真假来返回布尔类型的值</p>
<p>逻辑操作符 <code>and</code>    <code>or</code>    <code>not</code></p>
<p>从上到下，从左到右优先级依次递减</p>
<ol>
<li>幂运算 **</li>
<li>正负号 +x  -x</li>
<li>算术操作符  *  /  //  +  -</li>
<li>比较操作符  &lt;  &lt;=  &gt;  &gt;=  ==  !=</li>
<li>逻辑操作符 not  and  or</li>
</ol>
<h3 id="7-分支和循环"><a href="#7-分支和循环" class="headerlink" title="7.分支和循环"></a>7.分支和循环</h3><p><code>if-elif</code>的循环所消耗CPU的进程任务少于<code>if-else(if-else(...))</code>少于<code>if() if() if() ...</code></p>
<h6 id="Python可以有效避免“悬挂else”"><a href="#Python可以有效避免“悬挂else”" class="headerlink" title="Python可以有效避免“悬挂else”"></a>Python可以有效避免“悬挂else”</h6><h4 id="条件表达式（三元操作符）"><a href="#条件表达式（三元操作符）" class="headerlink" title="条件表达式（三元操作符）"></a>条件表达式（三元操作符）</h4><p>可以使用一条语句同时来完成条件判断和赋值操作</p>
<p>语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">x <span class="hljs-keyword">if</span> 条件 <span class="hljs-keyword">else</span> y<br></code></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">x, y = <span class="hljs-number">4</span>, <span class="hljs-number">5</span><br><span class="hljs-keyword">if</span> x &lt; y:<br>    small = x<br><span class="hljs-keyword">else</span>:<br>    small = y<br><br>改进=&gt;<br>small = <br></code></pre></td></tr></table></figure>

<h4 id="断言（assert）"><a href="#断言（assert）" class="headerlink" title="断言（assert）"></a>断言（assert）</h4><p>实质上是if条件语句的近亲，当这个关键字后边的条件语句为假的时候，程序自动崩溃并抛出AssertionError的异常（自己崩溃）</p>
<p>用他在程序中置入检查点，可以确保程序中某条件一定为真才能让程序正常工作，如果是正确的语句，则会忽略</p>
<h3 id="8-循环"><a href="#8-循环" class="headerlink" title="8.循环"></a>8.循环</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>    循环体<br></code></pre></td></tr></table></figure>

<h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>for循环是Python的计数器循环</p>
<p>Python的for循环可以自动调用迭代器的next方法，会自动捕获stop的异常，并结束循环。</p>
<p>语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 目标 <span class="hljs-keyword">in</span> 表达式:   //表达式可以是列表也可以是元祖<br>    循环体<br></code></pre></td></tr></table></figure>



<h3 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h3><p>random模块中有一个randint()函数，此函数会返回一个随机的整数</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Python，后端</tag>
      </tags>
  </entry>
  <entry>
    <title>做小part时的一些知识点</title>
    <url>/2021/10/09/%E5%81%9A%E5%B0%8Fpart%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p>在前端学习的过程中会有很多优质的博主，像是 Steven lei 的，跟着他们做前端页面可以学到更深层的css，也可以重新理解JavaScript，下边几个是我跟着做的小demo和相关的知识点。</p>
<h2 id="一-Character-Carousel"><a href="#一-Character-Carousel" class="headerlink" title="一.Character_Carousel"></a>一.Character_Carousel</h2><h3 id="1-letter-spacing属性"><a href="#1-letter-spacing属性" class="headerlink" title="1.letter-spacing属性"></a>1.<code>letter-spacing</code>属性</h3><p>letter-spacing 属性增加或减少字符间的空白（字符间距）。</p>
<p>该属性定义了在文本字符框之间插入多少空间。由于字符字形通常比其字符框要窄，指定长度值时，会调整字母之间通常的间隔。因此，normal 就相当于值为 0。</p>
<p>语法：letter-spacing : normal | length | inherit ;</p>
<p>属性值：</p>
<p>●　normal：默认。规定字符间没有额外的空间。</p>
<p>●　length：定义字符间的固定空间(允许使用负值)。</p>
<p>●　inherit：规定应该从父元素继承 letter-spacing 属性的值。</p>
<p>说明：该属性允许使用负值，这会让字母之间挤得更紧。</p>
<p>注释：所有浏览器都支持 letter-spacing 属性。任何的版本的 Internet Explorer (包括 IE8)都不支持属性值 “inherit”。</p>
<p>示例：</p>
<p>h1 {letter-spacing: -10px}</p>
<p>h3 {letter-spacing: normal}</p>
<p>h4 {letter-spacing: 20px}</p>
<h3 id="2-overflow属性"><a href="#2-overflow属性" class="headerlink" title="2.overflow属性"></a>2.<code>overflow</code>属性</h3><p>overflow 属性规定当内容溢出元素框时发生的事情。</p>
<p>说明：这个属性定义溢出元素内容区的内容会如何处理。如果值为 scroll，不论是否需要，用户代理都会提供一种滚动机制。因此，有可能即使元素框中可以放下所有内容也会出现滚动条。</p>
<p><strong>可能的值</strong></p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">visible</td>
<td align="left">默认值。内容不会被修剪，会呈现在元素框之外。</td>
</tr>
<tr>
<td align="left">hidden</td>
<td align="left">内容会被修剪，并且其余内容是不可见的。</td>
</tr>
<tr>
<td align="left">scroll</td>
<td align="left">内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td align="left">auto</td>
<td align="left">如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td align="left">inherit</td>
<td align="left">规定应该从父元素继承 overflow 属性的值。</td>
</tr>
</tbody></table>
<h3 id="3-box-sizing属性"><a href="#3-box-sizing属性" class="headerlink" title="3.box-sizing属性"></a>3.<code>box-sizing</code>属性</h3><p>box-sizing 属性允许您以特定的方式定义匹配某个区域的特定元素。</p>
<p>例如，假如您需要并排放置两个带边框的框，可通过将 box-sizing 设置为 “border-box”。这可令浏览器呈现出带有指定宽度和高度的框，并把边框和内边距放入框中。</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">box-sizing: content-box|border-box|inherit;<br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">content-box</td>
<td align="left">这是由 CSS2.1 规定的宽度高度行为。宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。</td>
</tr>
<tr>
<td align="left">border-box</td>
<td align="left">为元素设定的宽度和高度决定了元素的边框盒。就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</td>
</tr>
<tr>
<td align="left">inherit</td>
<td align="left">规定应从父元素继承 box-sizing 属性的值。</td>
</tr>
</tbody></table>
<h3 id="4-root选择器"><a href="#4-root选择器" class="headerlink" title="4.:root选择器"></a>4.<code>:root</code>选择器</h3><p>:root 选择器匹配<strong>文档根元素</strong>。</p>
<p>在 HTML 中，根元素始终是 html 元素。</p>
<h2 id="二-typewriting"><a href="#二-typewriting" class="headerlink" title="二.typewriting"></a>二.typewriting</h2><h3 id="1-css中的vh"><a href="#1-css中的vh" class="headerlink" title="1.css中的vh"></a>1.css中的vh</h3><p>css中的vh是一种视窗单位，也是相对单位。</p>
<p>相对于视窗的高度。视窗被均分为100单位的vh。一般要想使背景填充整个页面都设置其为100vh。</p>
<p>vh 优势在于能够直接获取高度，而用 % 在没有设置 body 高度的情况下，是无法正确获得可视区域的高度的。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>&#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">8vh</span>;&#125;<br></code></pre></td></tr></table></figure>

<p>如果视口的高度是200mm，那么上述代码中h1元素的字号将为16mm，即(8x200)/100</p>
<h2 id="三-Character-Charging"><a href="#三-Character-Charging" class="headerlink" title="三.Character_Charging"></a>三.Character_Charging</h2><h3 id="1-css的新函式clamp"><a href="#1-css的新函式clamp" class="headerlink" title="1.css的新函式clamp()"></a>1.css的新函式<code>clamp()</code></h3><h2 id="四-Dynamic-Effects"><a href="#四-Dynamic-Effects" class="headerlink" title="四.Dynamic_Effects"></a>四.Dynamic_Effects</h2><h3 id="1-利用JS给一句话中每个字母都加上标签"><a href="#1-利用JS给一句话中每个字母都加上标签" class="headerlink" title="1.利用JS给一句话中每个字母都加上标签"></a>1.利用JS给一句话中每个字母都加上标签</h3><p>代码</p>
<p>html部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./Dynamic_Effects.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Dynamic_Effects<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>CodingStartup<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./Dynamic_Effects.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>JS部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 如果要为每个字母都套上标签，可以在html中手动加入，也可以在JS中直接加入</span><br><span class="hljs-keyword">const</span> h1 = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;h1&#x27;</span>)<br><span class="hljs-comment">// 这个是利用了正则表达式，\S代表搜寻每一个非空白的字元</span><br><span class="hljs-comment">// 透过.replace替换成加上了&lt;span&gt;标签的内容</span><br><span class="hljs-comment">// $&amp;代表正则中匹配到出来的模式（Pattern）</span><br>h1.innerHTML = h1.textContent.replace(<span class="hljs-regexp">/\S/g</span>, <span class="hljs-string">&quot;&lt;span&gt;$&amp;&lt;/span&gt;&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>这样就实现了利用JS给每个文字添加标签</p>
<p><img  src="https://gitee.com/liu-lull/typora/raw/master/typora/image-20210725153625141.png"  ><span class="image-caption">image-20210725153625141</span></p>
]]></content>
      <categories>
        <category>学习</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/06/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
